# use DATETIME / GETDATE() instead of TIMESTAMP / CURRENT_TIMESTAMP
STATEMENT_CREATE_LOG_TABLE = \
    CREATE TABLE jam_log ( \
      log_date DATETIME DEFAULT GETDATE() NOT NULL, \
      virtual_wiki_id INTEGER NOT NULL, \
      wiki_user_id INTEGER, \
      display_name VARCHAR(200) NOT NULL, \
      topic_id INTEGER, \
      topic_version_id INTEGER, \
      log_type INTEGER NOT NULL, \
      log_sub_type INTEGER, \
      log_comment VARCHAR(200), \
      log_params VARCHAR(500), \
      CONSTRAINT jam_f_log_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_log_topic_ver FOREIGN KEY (topic_version_id) REFERENCES jam_topic_version(topic_version_id), \
      CONSTRAINT jam_f_log_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_f_log_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id) \
    )
# use DATETIME / GETDATE() instead of TIMESTAMP / CURRENT_TIMESTAMP
STATEMENT_CREATE_RECENT_CHANGE_TABLE = \
    CREATE TABLE jam_recent_change ( \
      topic_version_id INTEGER, \
      previous_topic_version_id INTEGER, \
      topic_id INTEGER, \
      topic_name VARCHAR(200), \
      change_date DATETIME DEFAULT GETDATE() NOT NULL, \
      change_comment VARCHAR(200), \
      wiki_user_id INTEGER, \
      display_name VARCHAR(200) NOT NULL, \
      edit_type INTEGER, \
      log_type INTEGER, \
      log_sub_type INTEGER, \
      log_params VARCHAR(500), \
      virtual_wiki_id INTEGER NOT NULL, \
      virtual_wiki_name VARCHAR(100) NOT NULL, \
      characters_changed INTEGER, \
      CONSTRAINT jam_f_rc_topic_ver FOREIGN KEY (topic_version_id) REFERENCES jam_topic_version(topic_version_id), \
      CONSTRAINT jam_f_rc_p_topic_v FOREIGN KEY (previous_topic_version_id) REFERENCES jam_topic_version(topic_version_id), \
      CONSTRAINT jam_f_rc_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_f_rc_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_rc_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id) \
    )
# use DATETIME instead of TIMESTAMP
STATEMENT_CREATE_TOPIC_TABLE = \
    CREATE TABLE jam_topic ( \
      topic_id INTEGER NOT NULL, \
      virtual_wiki_id INTEGER NOT NULL, \
      namespace_id INTEGER DEFAULT 0 NOT NULL, \
      topic_name VARCHAR(200) NOT NULL, \
      page_name VARCHAR(200) NOT NULL, \
      page_name_lower VARCHAR(200) NOT NULL, \
      delete_date DATETIME, \
      topic_read_only INTEGER DEFAULT 0 NOT NULL, \
      topic_admin_only INTEGER DEFAULT 0 NOT NULL, \
      current_version_id INTEGER, \
      topic_type INTEGER NOT NULL, \
      redirect_to VARCHAR(200), \
      CONSTRAINT jam_p_topic PRIMARY KEY (topic_id), \
      CONSTRAINT jam_f_topic_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id), \
      CONSTRAINT jam_f_topic_namesp FOREIGN KEY (namespace_id) REFERENCES jam_namespace(namespace_id), \
      CONSTRAINT jam_u_topic_name UNIQUE (topic_name, virtual_wiki_id, delete_date) \
    )
# use DATETIME / GETDATE() instead of TIMESTAMP / CURRENT_TIMESTAMP
STATEMENT_CREATE_TOPIC_VERSION_TABLE = \
    CREATE TABLE jam_topic_version ( \
      topic_version_id INTEGER NOT NULL, \
      topic_id INTEGER NOT NULL, \
      edit_comment VARCHAR(200), \
      version_content TEXT, \
      wiki_user_id INTEGER, \
      wiki_user_display VARCHAR(100) NOT NULL, \
      edit_date DATETIME DEFAULT GETDATE() NOT NULL, \
      edit_type INTEGER NOT NULL, \
      previous_topic_version_id INTEGER, \
      characters_changed INTEGER, \
      version_params VARCHAR(500), \
      CONSTRAINT jam_p_topic_ver PRIMARY KEY (topic_version_id), \
      CONSTRAINT jam_f_topicv_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_f_topicv_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_topicv_pver FOREIGN KEY (previous_topic_version_id) REFERENCES jam_topic_version(topic_version_id) \
    ) 
# use DATETIME / GETDATE() instead of TIMESTAMP / CURRENT_TIMESTAMP
STATEMENT_CREATE_USER_BLOCK_TABLE = \
    CREATE TABLE jam_user_block ( \
      user_block_id INTEGER NOT NULL, \
      wiki_user_id INTEGER, \
      ip_address VARCHAR(39), \
      block_date DATETIME DEFAULT GETDATE() NOT NULL, \
      block_end_date DATETIME, \
      block_reason VARCHAR(200), \
      blocked_by_user_id INTEGER NOT NULL, \
      unblock_date DATETIME, \
      unblock_reason VARCHAR(200), \
      unblocked_by_user_id INTEGER, \
      CONSTRAINT jam_u_ublock PRIMARY KEY (user_block_id), \
      CONSTRAINT jam_f_ublock_userid FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_ublock_blkid FOREIGN KEY (blocked_by_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_ublock_unblkid FOREIGN KEY (unblocked_by_user_id) REFERENCES jam_wiki_user(wiki_user_id) \
    )
# use DATETIME instead of TIMESTAMP
STATEMENT_CREATE_USERS_TABLE = \
    CREATE TABLE jam_users ( \
      username varchar(100) NOT NULL, \
      password varchar(100) NOT NULL, \
      enabled INTEGER DEFAULT 1 NOT NULL, \
      challenge_value varchar(100), \
      challenge_date DATETIME, \
      challenge_ip varchar(39), \
      challenge_tries integer DEFAULT 0 NOT NULL, \
      CONSTRAINT jam_p_users PRIMARY KEY (username) \
    )
# use DATETIME / GETDATE() instead of TIMESTAMP / CURRENT_TIMESTAMP
STATEMENT_CREATE_VIRTUAL_WIKI_TABLE = \
    CREATE TABLE jam_virtual_wiki ( \
      virtual_wiki_id INTEGER NOT NULL, \
      virtual_wiki_name VARCHAR(100) NOT NULL, \
      default_topic_name VARCHAR(200), \
      create_date DATETIME DEFAULT GETDATE() NOT NULL, \
      logo_image_url VARCHAR(200), \
      site_name VARCHAR(200), \
      meta_description VARCHAR(500), \
      CONSTRAINT jam_p_vwiki PRIMARY KEY (virtual_wiki_id), \
      CONSTRAINT jam_u_vwiki_name UNIQUE (virtual_wiki_name) \
    )
# use DATETIME instead of TIMESTAMP
STATEMENT_CREATE_WIKI_FILE_TABLE = \
    CREATE TABLE jam_file ( \
      file_id INTEGER NOT NULL, \
      virtual_wiki_id INTEGER NOT NULL, \
      file_name VARCHAR(200) NOT NULL, \
      delete_date DATETIME, \
      file_read_only INTEGER DEFAULT 0 NOT NULL, \
      file_admin_only INTEGER DEFAULT 0 NOT NULL, \
      file_url VARCHAR(200) NOT NULL, \
      mime_type VARCHAR(100) NOT NULL, \
      topic_id INTEGER NOT NULL, \
      file_size INTEGER NOT NULL, \
      CONSTRAINT jam_p_file PRIMARY KEY (file_id), \
      CONSTRAINT jam_f_file_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id), \
      CONSTRAINT jam_f_file_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_u_file_url UNIQUE (file_url), \
      CONSTRAINT jam_u_file_topic UNIQUE (virtual_wiki_id, topic_id) \
    )
# use DATETIME / GETDATE() instead of TIMESTAMP / CURRENT_TIMESTAMP
STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE = \
    CREATE TABLE jam_file_version ( \
      file_version_id INTEGER NOT NULL, \
      file_id INTEGER NOT NULL, \
      upload_comment VARCHAR(200), \
      file_url VARCHAR(200) NOT NULL, \
      wiki_user_id INTEGER, \
      wiki_user_display VARCHAR(100) NOT NULL, \
      upload_date DATETIME DEFAULT GETDATE() NOT NULL, \
      mime_type VARCHAR(100) NOT NULL, \
      file_size INTEGER NOT NULL, \
      CONSTRAINT jam_p_file_ver PRIMARY KEY (file_version_id), \
      CONSTRAINT jam_f_filev_file FOREIGN KEY (file_id) REFERENCES jam_file(file_id), \
      CONSTRAINT jam_f_filev_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_u_filev_url UNIQUE (file_url), \
      CONSTRAINT jam_u_filev_f_id_fv_id UNIQUE (file_id, file_version_id) \
    )
# MS SQL will not allow lower(login) in a constraint
STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX = \
    CREATE UNIQUE INDEX jam_u_wuser_login on jam_wiki_user (login)
# use DATETIME / GETDATE() instead of TIMESTAMP / CURRENT_TIMESTAMP
STATEMENT_CREATE_WIKI_USER_TABLE = \
    CREATE TABLE jam_wiki_user ( \
      wiki_user_id INTEGER NOT NULL, \
      login VARCHAR(100) NOT NULL, \
      display_name VARCHAR(100), \
      create_date DATETIME DEFAULT GETDATE() NOT NULL, \
      last_login_date DATETIME DEFAULT GETDATE() NOT NULL, \
      create_ip_address VARCHAR(39) NOT NULL, \
      last_login_ip_address VARCHAR(39) NOT NULL, \
      email VARCHAR(100), \
      CONSTRAINT jam_p_wuser PRIMARY KEY (wiki_user_id), \
      CONSTRAINT jam_f_wuser_users FOREIGN KEY (login) REFERENCES jam_users(username) \
    )
STATEMENT_CREATE_FILE_DATA_TABLE = \
    CREATE TABLE jam_file_data ( \
      file_version_id INTEGER NOT NULL, \
      resized INTEGER NOT NULL, \
      image_width INTEGER NOT NULL, \
      image_height INTEGER NOT NULL, \
      file_data VARBINARY(MAX) NOT NULL, \
      CONSTRAINT jam_p_file_data PRIMARY KEY (file_version_id, resized), \
      CONSTRAINT jam_f_file_data_file_version FOREIGN KEY (file_version_id) REFERENCES jam_file_version(file_version_id) \
    )
# MS SQL concatenates using the "+" symbol instead of "|"
STATEMENT_INSERT_LOG_ITEMS_BLOCK = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      log_sub_type, topic_id, topic_version_id \
    ) \
    SELECT \
      block_date, ?, blocked_by_user_id, \
      jam_wiki_user_2.login, ?, block_reason, \
      coalesce(jam_wiki_user.login, jam_user_block.ip_address) + '|' + convert(VARCHAR, block_end_date), \
      ?, null, null \
    FROM jam_wiki_user as jam_wiki_user_2, jam_user_block \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_user_block.wiki_user_id \
    ) \
    WHERE jam_user_block.blocked_by_user_id = jam_wiki_user_2.wiki_user_id \
    AND jam_user_block.unblocked_by_user_id is null
# MS SQL concatenates using the "+" symbol instead of "|"
STATEMENT_INSERT_LOG_ITEMS_BY_TOPIC_VERSION_TYPE = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      topic_id, topic_version_id \
    ) \
    SELECT \
      jam_topic_version.edit_date, jam_topic.virtual_wiki_id, \
      jam_topic_version.wiki_user_id, \
      coalesce(jam_wiki_user.login, jam_topic_version.wiki_user_display), \
      ?, jam_topic_version.edit_comment, jam_topic.topic_name + ?, \
      jam_topic.topic_id, jam_topic_version.topic_version_id \
    FROM jam_topic, jam_topic_version \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
    ) \
    WHERE jam_topic.topic_id = jam_topic_version.topic_id \
    AND jam_topic.virtual_wiki_id = ? \
    AND jam_topic_version.edit_type = ?
# MS SQL concatenates using the "+" symbol instead of "|"
STATEMENT_INSERT_LOG_ITEMS_MOVE = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      topic_id, topic_version_id \
    ) \
    SELECT \
      jam_topic_version.edit_date, jam_topic.virtual_wiki_id, \
      jam_topic_version.wiki_user_id, jam_topic_version.wiki_user_display, \
      ?, jam_topic_version.edit_comment, jam_topic.topic_name + '|' + jam_topic.redirect_to, \
      jam_topic.topic_id, jam_topic_version.topic_version_id \
    FROM jam_topic, jam_topic_version \
    WHERE jam_topic.topic_id = jam_topic_version.topic_id \
    AND jam_topic.virtual_wiki_id = ? \
    AND jam_topic.redirect_to is not null \
    AND jam_topic_version.edit_type = ?
# limit and offset aren't supported by MS SQL
STATEMENT_INSERT_RECENT_CHANGES_VERSIONS = \
    BEGIN \
        DECLARE @TOP int \
        DECLARE @LIMIT int \
        DECLARE @SQL varchar(3000) \
        SET @LIMIT = ? \
        SET @TOP = @LIMIT \
        SET @SQL = 'INSERT INTO jam_recent_change ( ' \
              + 'topic_version_id, topic_id, ' \
              + 'topic_name, change_date, wiki_user_id, display_name, ' \
              + 'edit_type, virtual_wiki_id, virtual_wiki_name, change_comment, ' \
              + 'previous_topic_version_id, characters_changed, log_type, log_params ' \
            + ') ' \
            + 'select top ' + CONVERT(VARCHAR, @TOP) + ' * from ( ' \
                + 'select jam_topic_version.topic_version_id, jam_topic.topic_id, ' \
                + 'jam_topic.topic_name, jam_topic_version.edit_date, ' \
                + 'jam_topic_version.wiki_user_id, ' \
                + 'coalesce(jam_wiki_user.login, jam_topic_version.wiki_user_display) as user_display, ' \
                + 'jam_topic_version.edit_type, jam_virtual_wiki.virtual_wiki_id, ' \
                + 'jam_virtual_wiki.virtual_wiki_name, jam_topic_version.edit_comment, ' \
                + 'jam_topic_version.previous_topic_version_id, ' \
                + 'jam_topic_version.characters_changed, null as log_type, jam_topic_version.version_params ' \
              + 'FROM jam_topic, jam_virtual_wiki, jam_topic_version ' \
              + 'LEFT OUTER JOIN jam_wiki_user ON ( ' \
                + 'jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id ' \
              + ') ' \
              + 'WHERE jam_topic.topic_id = jam_topic_version.topic_id ' \
              + 'AND jam_topic.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id ' \
              + 'AND jam_topic.delete_date is null ' \
              + 'AND ( ' \
                + 'jam_topic_version.edit_type in (1, 2, 3) ' \
                + 'OR (jam_topic_version.edit_type = 8 AND jam_topic.current_version_id != jam_topic_version.topic_version_id) ' \
              + ') ' \
            + ') a ' \
            + 'order by edit_date desc ' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_CATEGORIES = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @VWIKI_ID int \
        DECLARE @SQL varchar(500) \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(distinct jam_category.category_name) from jam_topic join jam_category on jam_topic.topic_id = jam_category.child_topic_id where jam_topic.virtual_wiki_id = @VWIKI_ID) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                   + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                      + 'select distinct top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' jam_category.category_name, sort_key=''null'' ' \
                      + 'from jam_topic join jam_category on jam_topic.topic_id = jam_category.child_topic_id ' \
                      + 'where jam_topic.virtual_wiki_id = '+CONVERT(VARCHAR, @VWIKI_ID) \
                      + ' order by category_name ' \
                   + ') a ' \
                   + 'order by category_name desc ' \
                 + ') b ' \
                 + 'order by category_name' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_LOG_ITEMS = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @VWIKI_ID int \
        DECLARE @SQL varchar(500) \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_log where virtual_wiki_id = @VWIKI_ID) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                   + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                      + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' * from jam_log ' \
                      + 'where virtual_wiki_id = '+CAST(@VWIKI_ID AS VARCHAR) \
                      + 'order by log_date desc ' \
                  + ') a ' \
                  + 'order by log_date ' \
                + ') b ' \
                + 'order by log_date desc' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_LOG_ITEMS_BY_TYPE = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @LOG_TYPE int \
        DECLARE @VWIKI_ID int \
        DECLARE @SQL varchar(500) \
        SET @LOG_TYPE = ? \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_log where log_type = @LOG_TYPE and virtual_wiki_id = @VWIKI_ID) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                   + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                      + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' * from jam_log ' \
                      + 'where log_type = '+CAST(@LOG_TYPE AS VARCHAR)+' and virtual_wiki_id = '+CAST(@VWIKI_ID AS VARCHAR) \
                      + 'order by log_date desc ' \
                  + ') a ' \
                  + 'order by log_date ' \
                + ') b ' \
                + 'order by log_date desc' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_RECENT_CHANGES = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @WIKI_NAME varchar(100) \
        DECLARE @SQL varchar(500) \
        SET @WIKI_NAME= ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_recent_change where virtual_wiki_name = @WIKI_NAME) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                   + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                      + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' * from jam_recent_change ' \
                      + 'where virtual_wiki_name = \'\''+@WIKI_NAME+'\'\' '\
                      + 'order by change_date desc ' \
                  + ') a ' \
                  + 'order by change_date ' \
                + ') b ' \
                + 'order by change_date desc' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_TOPIC_BY_TYPE = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @VWIKI_ID int \
        DECLARE @TOPIC_TYPE1 int \
        DECLARE @TOPIC_TYPE2 int \
        DECLARE @NAMESPACE_START int \
        DECLARE @NAMESPACE_END int \
        DECLARE @SQL varchar(500) \
        SET @VWIKI_ID = ? \
        SET @TOPIC_TYPE1 = ? \
        SET @TOPIC_TYPE2 = ? \
        SET @NAMESPACE_START = ? \
        SET @NAMESPACE_END = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic where virtual_wiki_id = @VWIKI_ID and topic_type in (@TOPIC_TYPE1, @TOPIC_TYPE2) and namespace_id >= @NAMESPACE_START and namespace_id <= @NAMESPACE_END and delete_date is null) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                   + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                      + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' topic_name, topic_id ' \
                      + 'from jam_topic where virtual_wiki_id = '+CONVERT(VARCHAR, @VWIKI_ID) \
                      + ' and topic_type in ('+CONVERT(VARCHAR, @TOPIC_TYPE1)+','+CONVERT(VARCHAR, @TOPIC_TYPE2)+') ' \
                      + ' and jam_topic.namespace_id >= '+CONVERT(VARCHAR, @NAMESPACE_START) \
                      + ' and jam_topic.namespace_id <= '+CONVERT(VARCHAR, @NAMESPACE_END) \
                      + ' and delete_date is null ' \
                      + 'order by topic_name ' \
                   + ') a ' \
                   + 'order by topic_name desc ' \
                 + ') b ' \
                 + ' order by topic_name ' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_TOPIC_HISTORY = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @TOPIC_ID int \
        DECLARE @SQL varchar(4000) \
        SET @TOPIC_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = ( \
            SELECT count(*) \
            FROM jam_topic, jam_virtual_wiki, jam_topic_version \
            LEFT OUTER JOIN jam_wiki_user ON ( \
              jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
            ) \
            WHERE jam_topic.topic_id = @TOPIC_ID \
            AND jam_topic.topic_id = jam_topic_version.topic_id \
            AND jam_topic.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id \
            AND jam_topic.delete_date is {0} null \
        ) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                 +   'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                 +     'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' * from ( ' \
                 +       'SELECT ' \
                 +         'jam_topic_version.topic_version_id, jam_topic.topic_id, ' \
                 +         'jam_topic.topic_name, jam_topic_version.edit_date as change_date, ' \
                 +         'jam_topic_version.wiki_user_id, ' \
                 +         'coalesce(jam_wiki_user.login, jam_topic_version.wiki_user_display) as display_name, ' \
                 +         'jam_topic_version.edit_type, jam_virtual_wiki.virtual_wiki_id, ' \
                 +         'jam_virtual_wiki.virtual_wiki_name, jam_topic_version.edit_comment as change_comment, ' \
                 +         'jam_topic_version.previous_topic_version_id, ' \
                 +         'jam_topic_version.characters_changed, null as log_type, ' \
                 +         'null as log_sub_type, ' \
                 +         'jam_topic_version.version_params as log_params ' \
                 +       'FROM jam_topic, jam_virtual_wiki, jam_topic_version ' \
                 +       'LEFT OUTER JOIN jam_wiki_user ON ( ' \
                 +         'jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id ' \
                 +       ') ' \
                 +       'WHERE jam_topic.topic_id = '+CONVERT(VARCHAR, @TOPIC_ID) + ' ' \
                 +       'AND jam_topic.topic_id = jam_topic_version.topic_id ' \
                 +       'AND jam_topic.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id ' \
                 +       'AND jam_topic.delete_date is {0} null ' \
                 +     ') as jam_recent_change ' \
                 +     'order by change_date desc ' \
                 +   ') a ' \
                 +   'order by change_date ' \
                 + ') b ' \
                 + 'order by change_date desc' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_TOPICS_ADMIN = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @VWIKI_ID int \
        DECLARE @SQL varchar(500) \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic where virtual_wiki_id = @VWIKI_ID and topic_admin_only = 1 and delete_date is null) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                   + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                      + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' topic_name ' \
                      + 'from jam_topic where virtual_wiki_id = '+CONVERT(VARCHAR, @VWIKI_ID) \
                      + ' and topic_admin_only = 1 ' \
                      + ' and delete_date is null ' \
                      + 'order by topic_name ' \
                   + ') a ' \
                   + 'order by topic_name desc ' \
                 + ') b ' \
                 + ' order by topic_name ' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_WATCHLIST_CHANGES = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @VWIKI_ID int \
        DECLARE @USER_ID int \
        DECLARE @SQL varchar(6000) \
        SET @VWIKI_ID = ? \
        SET @USER_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic, jam_virtual_wiki, jam_topic_version, jam_wiki_user, jam_watchlist where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id and jam_topic.current_version_id = jam_topic_version.topic_version_id and jam_topic.topic_name = jam_watchlist.topic_name and jam_virtual_wiki.virtual_wiki_id = @VWIKI_ID and jam_watchlist.wiki_user_id = @USER_ID and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5)) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( '\
                      + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( '\
                        + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' '\
                        + 'jam_topic_version.topic_version_id, jam_topic_version.topic_id, ' \
                        + 'jam_topic_version.previous_topic_version_id, jam_topic.topic_name, ' \
                        + 'jam_topic_version.edit_date as change_date, jam_topic_version.edit_comment as change_comment, ' \
                        + 'jam_topic_version.wiki_user_id, jam_topic_version.edit_type, ' \
                        + 'jam_wiki_user.login as display_name, jam_topic.virtual_wiki_id, ' \
                        + 'jam_virtual_wiki.virtual_wiki_name, ' \
                        + 'jam_topic_version.characters_changed, ' \
                        + 'null as log_type, null as log_sub_type, ' \
                        + 'jam_topic_version.version_params as log_params ' \
                        + 'from jam_topic, jam_virtual_wiki, jam_topic_version, ' \
                        + 'jam_wiki_user, jam_watchlist ' \
                        + 'where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id ' \
                        + 'and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id ' \
                        + 'and jam_topic.current_version_id = jam_topic_version.topic_version_id ' \
                        + 'and jam_topic.topic_name = jam_watchlist.topic_name ' \
                        + 'and jam_virtual_wiki.virtual_wiki_id = ' + CONVERT(VARCHAR, @VWIKI_ID) \
                        + ' and jam_watchlist.wiki_user_id = ' + CONVERT(VARCHAR, @USER_ID)\
                        + ' and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5) ' \
                        + 'order by edit_date desc '\
                      + ') a '\
                      + 'order by change_date '\
                    + ') b '\
                    + 'order by change_date desc '\
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @WIKI_NAME varchar(100) \
        DECLARE @WIKI_USER varchar(100) \
        DECLARE @SQL varchar(6000) \
        SET @WIKI_NAME = ? \
        SET @WIKI_USER = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic, jam_virtual_wiki, jam_topic_version where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id and jam_topic.topic_id = jam_topic_version.topic_id and jam_virtual_wiki.virtual_wiki_name = @WIKI_NAME and jam_topic_version.wiki_user_display = @WIKI_USER and jam_topic_version.wiki_user_id is null and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5)) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                     + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                        + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+ ' ' \
                        + 'jam_topic_version.topic_version_id, jam_topic_version.topic_id, ' \
                        + 'jam_topic_version.previous_topic_version_id, jam_topic.topic_name, ' \
                        + 'jam_topic_version.edit_date as change_date, jam_topic_version.edit_comment as change_comment, ' \
                        + 'jam_topic_version.wiki_user_id, jam_topic_version.edit_type, ' \
                        + 'jam_topic_version.wiki_user_display as display_name, ' \
                        + 'jam_topic.virtual_wiki_id, jam_virtual_wiki.virtual_wiki_name, ' \
                        + 'jam_topic_version.characters_changed, ' \
                        + 'null as log_type, null as log_sub_type, ' \
                        + 'jam_topic_version.version_params as log_params ' \
                        + 'from jam_topic, jam_virtual_wiki, jam_topic_version ' \
                        + 'where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id ' \
                        + 'and jam_topic.topic_id = jam_topic_version.topic_id ' \
                        + 'and jam_virtual_wiki.virtual_wiki_name = \'\''+@WIKI_NAME+'\'\' '\
                        + 'and jam_topic_version.wiki_user_display = \'\''+@WIKI_USER+'\'\' '\
                        + 'and jam_topic_version.wiki_user_id is null ' \
                        + 'and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5) ' \
                        + 'order by edit_date desc ' \
                      + ') a ' \
                      + ' order by change_date ' \
                    + ') b ' \
                    + 'order by change_date desc ' \
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @WIKI_NAME varchar(100) \
        DECLARE @WIKI_USER varchar(100) \
        DECLARE @SQL varchar(6000) \
        SET @WIKI_NAME = ? \
        SET @WIKI_USER = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic, jam_virtual_wiki, jam_topic_version, jam_wiki_user where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id and jam_topic.topic_id = jam_topic_version.topic_id and jam_virtual_wiki.virtual_wiki_name = @WIKI_NAME and jam_wiki_user.login = @WIKI_USER and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5)) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( '\
                      + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( '\
                        + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' '\
                          + 'jam_topic_version.topic_version_id, jam_topic_version.topic_id, '\
                          + 'jam_topic_version.previous_topic_version_id, jam_topic.topic_name, '\
                          + 'jam_topic_version.edit_date as change_date, jam_topic_version.edit_comment as change_comment, '\
                          + 'jam_topic_version.wiki_user_id, jam_topic_version.edit_type, '\
                          + 'jam_wiki_user.login as display_name, jam_topic.virtual_wiki_id, '\
                          + 'jam_virtual_wiki.virtual_wiki_name, '\
                          + 'jam_topic_version.characters_changed, ' \
                          + 'null as log_type, null as log_sub_type, ' \
                          + 'jam_topic_version.version_params as log_params ' \
                        + 'from jam_topic, jam_virtual_wiki, jam_topic_version, jam_wiki_user '\
                        + 'where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id '\
                        + 'and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id '\
                        + 'and jam_topic.topic_id = jam_topic_version.topic_id '\
                        + 'and jam_virtual_wiki.virtual_wiki_name = \'\''+@WIKI_NAME+'\'\' '\
                        + 'and jam_wiki_user.login = \'\''+@WIKI_USER+'\'\' '\
                        + 'and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5) '\
                        + 'order by edit_date desc '\
                      + ') a '\
                      + 'order by change_date '\
                    + ') b '\
                    + 'order by change_date desc '\
        EXEC(@SQL) \
    END
# limit and offset aren't supported by MS SQL
STATEMENT_SELECT_WIKI_USERS = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @SQL varchar(500) \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_wiki_user) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @SQL = 'select * from ( ' \
                   + 'select top '+CONVERT(VARCHAR, @TOP)+' * from ( ' \
                      + 'select top '+CONVERT(VARCHAR, @OFFSET + @LIMIT)+' login ' \
                      + 'from jam_wiki_user ' \
                      + 'order by login ' \
                   + ') a ' \
                   + 'order by login desc ' \
                 + ') b ' \
                 + ' order by login ' \
        EXEC(@SQL) \
    END
# use "add" instead of "add column"
UPGRADE_130_ADD_USER_TABLE_COLUMN_CHALLENGE_VALUE = \
    ALTER TABLE jam_users ADD challenge_value varchar(100)
# use "add" instead of "add column", DATETIME instead of TIMESTAMP
UPGRADE_130_ADD_USER_TABLE_COLUMN_CHALLENGE_DATE = \
    ALTER TABLE jam_users ADD challenge_date DATETIME
# use "add" instead of "add column"
UPGRADE_130_ADD_USER_TABLE_COLUMN_CHALLENGE_IP = \
    ALTER TABLE jam_users ADD challenge_ip varchar(39)
# use "add" instead of "add column"
UPGRADE_130_ADD_USER_TABLE_COLUMN_CHALLENGE_TRIES = \
    ALTER TABLE jam_users ADD challenge_tries integer default 0 not null
