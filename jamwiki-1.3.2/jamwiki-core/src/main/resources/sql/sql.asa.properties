# columns must specify "NULL" explicitly
STATEMENT_CREATE_CATEGORY_TABLE = \
    CREATE TABLE jam_category ( \
      child_topic_id INTEGER NOT NULL, \
      category_name VARCHAR(200) NOT NULL, \
      sort_key VARCHAR(200) NULL, \
      CONSTRAINT jam_p_category PRIMARY KEY (child_topic_id, category_name), \
      CONSTRAINT jam_f_cat_child_id FOREIGN KEY (child_topic_id) REFERENCES jam_topic(topic_id) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_GROUP_TABLE = \
    CREATE TABLE jam_group ( \
      group_id INTEGER NOT NULL, \
      group_name VARCHAR(30) NOT NULL, \
      group_description VARCHAR(200) NULL, \
      CONSTRAINT jam_p_group PRIMARY KEY (group_id), \
      CONSTRAINT jam_u_group_name UNIQUE (group_name) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_LOG_TABLE = \
    CREATE TABLE jam_log ( \
      log_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      virtual_wiki_id INTEGER NOT NULL, \
      wiki_user_id INTEGER NULL, \
      display_name VARCHAR(200) NOT NULL, \
      topic_id INTEGER NULL, \
      topic_version_id INTEGER NULL, \
      log_type INTEGER NOT NULL, \
      log_sub_type INTEGER, \
      log_comment VARCHAR(200) NULL, \
      log_params VARCHAR(500) NULL, \
      CONSTRAINT jam_f_log_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_log_topic_ver FOREIGN KEY (topic_version_id) REFERENCES jam_topic_version(topic_version_id), \
      CONSTRAINT jam_f_log_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_f_log_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id) \
    )
# columns must specify "NULL" explicitly
# removed CONSTRAINT jam_f_namesp_namesp FOREIGN KEY (main_namespace_id) REFERENCES jam_namespace(namespace_id)
# as ASA will not allow foreign key constraint if the value is NULL
# needs to be a CHECK constraint instead?     
STATEMENT_CREATE_NAMESPACE_TABLE = \
    CREATE TABLE jam_namespace ( \
      namespace_id INTEGER NOT NULL, \
      namespace VARCHAR(200) NOT NULL, \
      main_namespace_id INTEGER NULL, \
      CONSTRAINT jam_p_namesp PRIMARY KEY (namespace_id), \
      CONSTRAINT jam_u_namesp_namesp UNIQUE (namespace) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_RECENT_CHANGE_TABLE = \
    CREATE TABLE jam_recent_change ( \
      topic_version_id INTEGER NULL, \
      previous_topic_version_id INTEGER NULL, \
      topic_id INTEGER NULL, \
      topic_name VARCHAR(200) NULL, \
      change_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      change_comment VARCHAR(200) NULL, \
      wiki_user_id INTEGER NULL, \
      display_name VARCHAR(200) NOT NULL, \
      edit_type INTEGER NULL, \
      log_type INTEGER NULL, \
      log_sub_type INTEGER, \
      log_params VARCHAR(500) NULL, \
      virtual_wiki_id INTEGER NOT NULL, \
      virtual_wiki_name VARCHAR(100) NOT NULL, \
      characters_changed INTEGER NULL, \
      CONSTRAINT jam_f_rc_topic_ver FOREIGN KEY (topic_version_id) REFERENCES jam_topic_version(topic_version_id), \
      CONSTRAINT jam_f_rc_p_topic_v FOREIGN KEY (previous_topic_version_id) REFERENCES jam_topic_version(topic_version_id), \
      CONSTRAINT jam_f_rc_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_f_rc_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_rc_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_ROLE_TABLE = \
    CREATE TABLE jam_role ( \
      role_name VARCHAR(30) NOT NULL, \
      role_description VARCHAR(200) NULL, \
      CONSTRAINT jam_p_role PRIMARY KEY (role_name) \
    )
# columns must specify "NULL" explicitly
# remove the UNIQUE constraint for topic_name, virtual_wiki_id and delete_date 
# as ASA will not allow foreign key constraint if the value is NULL
# needs to be a CHECK constraint instead?     
STATEMENT_CREATE_TOPIC_TABLE = \
    CREATE TABLE jam_topic ( \
      topic_id INTEGER NOT NULL, \
      virtual_wiki_id INTEGER NOT NULL, \
      namespace_id INTEGER NOT NULL, \
      topic_name VARCHAR(200) NOT NULL, \
      page_name VARCHAR(200) NOT NULL, \
      page_name_lower VARCHAR(200) NOT NULL, \
      delete_date TIMESTAMP NULL DEFAULT NULL, \
      topic_read_only INTEGER NOT NULL DEFAULT 0, \
      topic_admin_only INTEGER NOT NULL DEFAULT 0, \
      current_version_id INTEGER NULL, \
      topic_type INTEGER NOT NULL, \
      redirect_to VARCHAR(200) NULL, \
      CONSTRAINT jam_p_topic PRIMARY KEY (topic_id), \
      CONSTRAINT jam_f_topic_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id), \
      CONSTRAINT jam_f_topic_namesp FOREIGN KEY (namespace_id) REFERENCES jam_namespace(namespace_id) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_TOPIC_VERSION_TABLE = \
    CREATE TABLE jam_topic_version ( \
      topic_version_id INTEGER NOT NULL, \
      topic_id INTEGER NOT NULL, \
      edit_comment VARCHAR(200) NULL, \
      version_content TEXT NULL, \
      wiki_user_id INTEGER NULL, \
      wiki_user_display VARCHAR(100) NOT NULL, \
      edit_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      edit_type INTEGER NOT NULL, \
      previous_topic_version_id INTEGER NULL, \
      characters_changed INTEGER NULL, \
      version_params VARCHAR(500) NULL, \
      CONSTRAINT jam_p_topic_ver PRIMARY KEY (topic_version_id), \
      CONSTRAINT jam_f_topicv_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_f_topicv_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_topicv_pver FOREIGN KEY (previous_topic_version_id) REFERENCES jam_topic_version(topic_version_id) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_USER_BLOCK_TABLE = \
    CREATE TABLE jam_user_block ( \
      user_block_id INTEGER NOT NULL, \
      wiki_user_id INTEGER NULL, \
      ip_address VARCHAR(39) NULL, \
      block_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      block_end_date TIMESTAMP NULL, \
      block_reason VARCHAR(200) NULL, \
      blocked_by_user_id INTEGER NOT NULL, \
      unblock_date TIMESTAMP NULL, \
      unblock_reason VARCHAR(200) NULL, \
      unblocked_by_user_id INTEGER NULL, \
      CONSTRAINT jam_u_ublock PRIMARY KEY (user_block_id), \
      CONSTRAINT jam_f_ublock_userid FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_ublock_blkid FOREIGN KEY (blocked_by_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_ublock_unblkid FOREIGN KEY (unblocked_by_user_id) REFERENCES jam_wiki_user(wiki_user_id) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_USER_PREFERENCES_DEFAULTS_TABLE = \
    CREATE TABLE jam_user_preferences_defaults ( \
      pref_key VARCHAR(100) NULL, \
      pref_value VARCHAR(250) NULL, \
      pref_group_key VARCHAR(100) NULL, \
      seq_nr INTEGER NULL, \
      CONSTRAINT jam_p_uprefdef PRIMARY KEY (pref_key) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_USER_PREFERENCES_TABLE = \
    CREATE TABLE jam_user_preferences ( \
      wiki_user_id INTEGER NULL, \
      pref_key VARCHAR(100) NULL, \
      pref_value VARCHAR(250) NULL, \
      CONSTRAINT jam_p_upref PRIMARY KEY (wiki_user_id, pref_key), \
      CONSTRAINT jam_f_upref_uwiki FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user (wiki_user_id), \
      CONSTRAINT jam_f_upref_uprefdef FOREIGN KEY (pref_key) REFERENCES jam_user_preferences_defaults (pref_key) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_USERS_TABLE = \
    CREATE TABLE jam_users ( \
      username varchar(100) NOT NULL, \
      password varchar(100) NOT NULL, \
      enabled INTEGER DEFAULT 1 NOT NULL, \
      challenge_value varchar(100) NULL, \
      challenge_date timestamp NULL, \
      challenge_ip varchar(39) NULL, \
      challenge_tries integer DEFAULT 0 NOT NULL, \
      CONSTRAINT jam_p_users PRIMARY KEY (username) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_VIRTUAL_WIKI_TABLE = \
    CREATE TABLE jam_virtual_wiki ( \
      virtual_wiki_id INTEGER NOT NULL, \
      virtual_wiki_name VARCHAR(100) NOT NULL, \
      default_topic_name VARCHAR(200) NULL, \
      create_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      logo_image_url VARCHAR(200) NULL, \
      site_name VARCHAR(200) NULL, \
      meta_description VARCHAR(500) NULL, \
      CONSTRAINT jam_p_vwiki PRIMARY KEY (virtual_wiki_id), \
      CONSTRAINT jam_u_vwiki_name UNIQUE (virtual_wiki_name) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_WATCHLIST_TABLE = \
    CREATE TABLE jam_watchlist ( \
      wiki_user_id INTEGER NOT NULL, \
      topic_name VARCHAR(200) NULL, \
      virtual_wiki_id INTEGER NOT NULL, \
      CONSTRAINT jam_p_watchlist PRIMARY KEY (wiki_user_id, topic_name, virtual_wiki_id), \
      CONSTRAINT jam_f_wlist_userid FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_f_wlist_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_WIKI_FILE_TABLE = \
    CREATE TABLE jam_file ( \
      file_id INTEGER NOT NULL, \
      virtual_wiki_id INTEGER NOT NULL, \
      file_name VARCHAR(200) NOT NULL, \
      delete_date TIMESTAMP NULL, \
      file_read_only INTEGER NOT NULL DEFAULT 0, \
      file_admin_only INTEGER NOT NULL DEFAULT 0, \
      file_url VARCHAR(200) NOT NULL, \
      mime_type VARCHAR(100) NOT NULL, \
      topic_id INTEGER NOT NULL, \
      file_size INTEGER NOT NULL, \
      CONSTRAINT jam_p_file PRIMARY KEY (file_id), \
      CONSTRAINT jam_f_file_vwiki FOREIGN KEY (virtual_wiki_id) REFERENCES jam_virtual_wiki(virtual_wiki_id), \
      CONSTRAINT jam_f_file_topic FOREIGN KEY (topic_id) REFERENCES jam_topic(topic_id), \
      CONSTRAINT jam_u_file_url UNIQUE (file_url), \
      CONSTRAINT jam_u_file_topic UNIQUE (virtual_wiki_id, topic_id) \
    )
# columns must specify "NULL" explicitly
STATEMENT_CREATE_WIKI_FILE_VERSION_TABLE = \
    CREATE TABLE jam_file_version ( \
      file_version_id INTEGER NOT NULL, \
      file_id INTEGER NOT NULL, \
      upload_comment VARCHAR(200) NULL, \
      file_url VARCHAR(200) NOT NULL, \
      wiki_user_id INTEGER NULL, \
      wiki_user_display VARCHAR(100) NOT NULL, \
      upload_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      mime_type VARCHAR(100) NOT NULL, \
      file_size INTEGER NOT NULL, \
      CONSTRAINT jam_p_file_ver PRIMARY KEY (file_version_id), \
      CONSTRAINT jam_f_filev_file FOREIGN KEY (file_id) REFERENCES jam_file(file_id), \
      CONSTRAINT jam_f_filev_wuser FOREIGN KEY (wiki_user_id) REFERENCES jam_wiki_user(wiki_user_id), \
      CONSTRAINT jam_u_filev_url UNIQUE (file_url) \
    )
# columns must specify "NULL" explicitly
# login is a reserved word, so surround with quotation marks
STATEMENT_CREATE_WIKI_USER_TABLE = \
    CREATE TABLE jam_wiki_user ( \
      wiki_user_id INTEGER NOT NULL, \
      "login" VARCHAR(100) NOT NULL, \
      display_name VARCHAR(100) NULL, \
      create_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      last_login_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, \
      create_ip_address VARCHAR(39) NOT NULL, \
      last_login_ip_address VARCHAR(39) NOT NULL, \
      email VARCHAR(100) NULL, \
      CONSTRAINT jam_p_wuser PRIMARY KEY (wiki_user_id), \
      CONSTRAINT jam_f_wuser_users FOREIGN KEY ("login") REFERENCES jam_users(username) \
    )
# login is a reserved word, so surround with quotation marks
STATEMENT_CREATE_WIKI_USER_LOGIN_INDEX = \
    CREATE UNIQUE INDEX jam_u_wuser_loginlc on jam_wiki_user (lower("login") as login_lc)
STATEMENT_INSERT_RECENT_CHANGES_VERSIONS = \
    BEGIN \
        DECLARE @TOP int \
        DECLARE @LIMIT int \
        DECLARE @SQL varchar(3000) \
        SET @LIMIT = ? \
        SET @TOP = @LIMIT \
        SET @SQL = 'INSERT INTO jam_recent_change ( ' \
              + 'topic_version_id, topic_id, ' \
              + 'topic_name, change_date, wiki_user_id, display_name, ' \
              + 'edit_type, virtual_wiki_id, virtual_wiki_name, change_comment, ' \
              + 'previous_topic_version_id, characters_changed, log_type, log_params ' \
            + ') ' \
            + 'select top ' + CONVERT(VARCHAR, @TOP) + ' * from ( ' \
                + 'select jam_topic_version.topic_version_id, jam_topic.topic_id, ' \
                + 'jam_topic.topic_name, jam_topic_version.edit_date, ' \
                + 'jam_topic_version.wiki_user_id, ' \
                + 'coalesce(jam_wiki_user.login, jam_topic_version.wiki_user_display) as user_display, ' \
                + 'jam_topic_version.edit_type, jam_virtual_wiki.virtual_wiki_id, ' \
                + 'jam_virtual_wiki.virtual_wiki_name, jam_topic_version.edit_comment, ' \
                + 'jam_topic_version.previous_topic_version_id, ' \
                + 'jam_topic_version.characters_changed, null as log_type, jam_topic_version.version_params ' \
              + 'FROM jam_topic, jam_virtual_wiki, jam_topic_version ' \
              + 'LEFT OUTER JOIN jam_wiki_user ON ( ' \
                + 'jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id ' \
              + ') ' \
              + 'WHERE jam_topic.topic_id = jam_topic_version.topic_id ' \
              + 'AND jam_topic.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id ' \
              + 'AND jam_topic.delete_date is null ' \
              + 'AND ( ' \
                + 'jam_topic_version.edit_type in (1, 2, 3) ' \
                + 'OR (jam_topic_version.edit_type = 8 AND jam_topic.current_version_id != jam_topic_version.topic_version_id) ' \
              + ') ' \
            + ') a ' \
            + 'order by edit_date desc ' \
        EXEC(@SQL) \
    END
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_LOG_ITEMS_BLOCK = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      log_sub_type, topic_id, topic_version_id \
    ) \
    SELECT \
      block_date, ?, blocked_by_user_id, \
      jam_wiki_user_2."login", ?, block_reason, \
      coalesce(jam_wiki_user."login", jam_user_block.ip_address) || '|' || block_end_date, \
      ?, null, null \
    FROM jam_wiki_user as jam_wiki_user_2, jam_user_block \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_user_block.wiki_user_id \
    ) \
    WHERE jam_user_block.blocked_by_user_id = jam_wiki_user_2.wiki_user_id \
    AND jam_user_block.unblocked_by_user_id is null
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_LOG_ITEMS_BY_TOPIC_VERSION_TYPE = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      topic_id, topic_version_id \
    ) \
    SELECT \
      jam_topic_version.edit_date, jam_topic.virtual_wiki_id, \
      jam_topic_version.wiki_user_id, \
      coalesce(jam_wiki_user."login", jam_topic_version.wiki_user_display), \
      ?, jam_topic_version.edit_comment, jam_topic.topic_name || ?, \
      jam_topic.topic_id, jam_topic_version.topic_version_id \
    FROM jam_topic, jam_topic_version \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
    ) \
    WHERE jam_topic.topic_id = jam_topic_version.topic_id \
    AND jam_topic.virtual_wiki_id = ? \
    AND jam_topic_version.edit_type = ?
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_LOG_ITEMS_IMPORT = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      topic_id, topic_version_id \
    ) \
    SELECT \
      jam_topic_version.edit_date, jam_topic.virtual_wiki_id, \
      jam_topic_version.wiki_user_id, \
      coalesce(jam_wiki_user."login", jam_topic_version.wiki_user_display), \
      ?, jam_topic_version.edit_comment, jam_topic.topic_name, \
      jam_topic.topic_id, jam_topic_version.topic_version_id \
    FROM jam_topic, jam_topic_version \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
    ) \
    WHERE jam_topic.topic_id = jam_topic_version.topic_id \
    AND jam_topic_version.edit_type = ? \
    AND jam_topic.virtual_wiki_id = ? \
    AND jam_topic_version.topic_version_id in ( \
      select max(topic_version_id) from jam_topic_version \
      where edit_type = ? \
      group by topic_id \
    )
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_LOG_ITEMS_MOVE = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      topic_id, topic_version_id \
    ) \
    SELECT \
      jam_topic_version.edit_date, jam_topic.virtual_wiki_id, \
      jam_topic_version.wiki_user_id, \
      coalesce(jam_wiki_user."login", jam_topic_version.wiki_user_display), \
      ?, jam_topic_version.edit_comment, jam_topic.topic_name || '|' || jam_topic.redirect_to, \
      jam_topic.topic_id, jam_topic_version.topic_version_id \
    FROM jam_topic, jam_topic_version \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
    ) \
    WHERE jam_topic.topic_id = jam_topic_version.topic_id \
    AND jam_topic.virtual_wiki_id = ? \
    AND jam_topic.redirect_to is not null \
    AND jam_topic_version.edit_type = ?
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_LOG_ITEMS_UNBLOCK = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      log_sub_type, topic_id, topic_version_id \
    ) \
    SELECT \
      unblock_date, ?, unblocked_by_user_id, \
      jam_wiki_user_2."login", ?, unblock_reason, \
      coalesce(jam_wiki_user."login", jam_user_block.ip_address), \
      ?, null, null \
    FROM jam_wiki_user as jam_wiki_user_2, jam_user_block \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_user_block.wiki_user_id \
    ) \
    WHERE jam_user_block.unblocked_by_user_id = jam_wiki_user_2.wiki_user_id \
    AND jam_user_block.unblocked_by_user_id is not null
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_LOG_ITEMS_UPLOAD = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      topic_id, topic_version_id \
    ) \
    SELECT \
      jam_topic_version.edit_date, jam_topic.virtual_wiki_id, \
      jam_topic_version.wiki_user_id, \
      coalesce(jam_wiki_user."login", jam_topic_version.wiki_user_display), \
      ?, jam_topic_version.edit_comment, jam_topic.topic_name, \
      jam_topic.topic_id, jam_topic_version.topic_version_id \
    FROM jam_topic, jam_topic_version \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
    ) \
    WHERE jam_topic.topic_id = jam_topic_version.topic_id \
    AND jam_topic.virtual_wiki_id = ? \
    AND jam_topic_version.edit_type = ? \
    AND jam_topic.topic_type in (4, 6)
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_LOG_ITEMS_USER = \
    INSERT INTO jam_log ( \
      log_date, virtual_wiki_id, wiki_user_id, \
      display_name, log_type, log_comment, log_params, \
      topic_id, topic_version_id \
    ) \
    SELECT \
      create_date, ?, wiki_user_id, \
      "login", ?, null, null, null, null \
    FROM jam_wiki_user
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_RECENT_CHANGES_VERSIONS = \
    INSERT INTO jam_recent_change ( \
      topic_version_id, topic_id, \
      topic_name, change_date, wiki_user_id, display_name, \
      edit_type, virtual_wiki_id, virtual_wiki_name, change_comment, \
      previous_topic_version_id, characters_changed, log_type, log_params \
    ) \
    SELECT \
      jam_topic_version.topic_version_id, jam_topic.topic_id, \
      jam_topic.topic_name, jam_topic_version.edit_date, \
      jam_topic_version.wiki_user_id, \
      coalesce(jam_wiki_user."login", jam_topic_version.wiki_user_display), \
      jam_topic_version.edit_type, jam_virtual_wiki.virtual_wiki_id, \
      jam_virtual_wiki.virtual_wiki_name, jam_topic_version.edit_comment, \
      jam_topic_version.previous_topic_version_id, \
      jam_topic_version.characters_changed, null, jam_topic_version.version_params \
    FROM jam_topic, jam_virtual_wiki, jam_topic_version \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
    ) \
    WHERE jam_topic.topic_id = jam_topic_version.topic_id \
    AND jam_topic.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id \
    AND jam_topic.delete_date is null \
    AND ( \
      jam_topic_version.edit_type in (1, 2, 3) \
      OR (jam_topic_version.edit_type = 8 AND jam_topic.current_version_id != jam_topic_version.topic_version_id) \
    )
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_RECENT_CHANGES_LOGS = \
    INSERT INTO jam_recent_change ( \
      topic_version_id, topic_id, \
      topic_name, change_date, wiki_user_id, display_name, \
      edit_type, virtual_wiki_id, virtual_wiki_name, change_comment, \
      previous_topic_version_id, characters_changed, log_type, \
      log_sub_type, log_params \
    ) \
    SELECT \
      jam_log.topic_version_id, jam_log.topic_id, null, jam_log.log_date, \
      jam_log.wiki_user_id, coalesce(jam_wiki_user."login", jam_log.display_name), \
      null, jam_virtual_wiki.virtual_wiki_id, \
      jam_virtual_wiki.virtual_wiki_name, jam_log.log_comment, \
      null, null, jam_log.log_type, jam_log.log_sub_type, jam_log.log_params \
    FROM jam_virtual_wiki, jam_log \
    LEFT OUTER JOIN jam_wiki_user ON ( \
      jam_wiki_user.wiki_user_id = jam_log.wiki_user_id \
    ) \
    WHERE jam_log.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_WIKI_USER = \
    insert into jam_wiki_user ( \
      wiki_user_id, "login", display_name, create_date, \
      last_login_date, create_ip_address, last_login_ip_address, \
      default_locale, email, editor, signature \
    ) values ( \
      ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? \
    )
# login is a reserved word, so surround with quotation marks
STATEMENT_INSERT_WIKI_USER_AUTO_INCREMENT = \
    insert into jam_wiki_user ( \
      "login", display_name, create_date, \
      last_login_date, create_ip_address, last_login_ip_address, \
      default_locale, email, editor, signature \
    ) values ( \
      ?, ?, ?, ?, ?, ?, ?, ?, ?, ? \
    )
# login is a reserved word, so surround with quotation marks
STATEMENT_SELECT_AUTHORITIES_AUTHORITY = \
    ( \
      select jam_group_authorities.group_id as group_id, \
      null as wiki_user_id, \
      jam_group_authorities.authority as authority, \
      jam_group.group_name as group_name, \
      null as username \
      from jam_group_authorities, jam_group \
      where jam_group_authorities.group_id = jam_group.group_id \
      and jam_group.group_id in ( \
        select group_id from jam_group_authorities where authority = ? \
      ) \
    ) union ( \
      select null as group_id, \
      jam_wiki_user.wiki_user_id as wiki_user_id, \
      jam_authorities.authority as authority, \
      null as group_name, \
      jam_authorities.username as username \
      from jam_authorities, jam_users, jam_wiki_user \
      where jam_authorities.username = jam_users.username \
      and jam_wiki_user."login" = jam_users.username \
      and jam_users.username in ( \
        select username from jam_authorities where authority = ? \
      ) \
    ) \
    order by group_name, username
# login is a reserved word, so surround with quotation marks
STATEMENT_SELECT_AUTHORITIES_LOGIN = \
    select jam_wiki_user.wiki_user_id, jam_users.username, \
    jam_authorities.authority \
    from jam_wiki_user, jam_users \
    left outer join jam_authorities on ( \
      jam_users.username = jam_authorities.username \
    ) \
    where jam_users.username = jam_wiki_user."login" \
    and lower(jam_users.username) like ? \
    order by jam_users.username 
# limit and offset aren't supported, so find another way to return only a portion of the result set
STATEMENT_SELECT_CATEGORIES = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @VWIKI_ID int \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic join jam_category on jam_topic.topic_id = jam_category.child_topic_id where jam_topic.virtual_wiki_id = @VWIKI_ID group by jam_category.category_name, jam_category.sort_key) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                   select top @TOP * from ( \
                      select distinct top @INNERCOUNT jam_category.category_name, jam_category.sort_key \
                      from jam_topic join jam_category on jam_topic.topic_id = jam_category.child_topic_id \
                      where jam_topic.virtual_wiki_id = @VWIKI_ID \
                      order by jam_category.sort_key \
                   ) a \
                   order by sort_key desc \
                 ) b \
                 order by sort_key \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
STATEMENT_SELECT_LOG_ITEMS = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @VWIKI_ID int \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_log where virtual_wiki_id = @VWIKI_ID) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                   select top @TOP * from ( \
                      select top @INNERCOUNT * from jam_log \
                      where virtual_wiki_id = @VWIKI_ID \
                      order by log_date desc \
                  ) a \
                  order by log_date \
                ) b \
                order by log_date desc \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
STATEMENT_SELECT_LOG_ITEMS_BY_TYPE = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @LOG_TYPE int \
        DECLARE @VWIKI_ID int \
        SET @LOG_TYPE = ? \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_log where log_type = @LOG_TYPE and virtual_wiki_id = @VWIKI_ID) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                   select top @TOP * from ( \
                      select top @INNERCOUNT * from jam_log \
                      where log_type = @LOG_TYPE \
                      and virtual_wiki_id = @VWIKI_ID \
                      order by log_date desc \
                  ) a \
                  order by log_date \
                ) b \
                order by log_date desc \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
STATEMENT_SELECT_RECENT_CHANGES = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @WIKI_NAME varchar(100) \
        SET @WIKI_NAME= ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_recent_change where virtual_wiki_name = @WIKI_NAME) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                   select top @TOP * from ( \
                      select top @INNERCOUNT * from jam_recent_change \
                      where virtual_wiki_name = @WIKI_NAME \
                      order by change_date desc \
                  ) a \
                  order by change_date \
                ) b \
                order by change_date desc \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
STATEMENT_SELECT_TOPIC_BY_TYPE = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @VWIKI_ID int \
        DECLARE @TOPIC_TYPE1 int \
        DECLARE @TOPIC_TYPE2 int \
        DECLARE @NAMESPACE_START int \
        DECLARE @NAMESPACE_END int \
        SET @VWIKI_ID = ? \
        SET @TOPIC_TYPE1 = ? \
        SET @TOPIC_TYPE2 = ? \
        SET @NAMESPACE_START = ? \
        SET @NAMESPACE_END = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic where virtual_wiki_id = @VWIKI_ID and topic_type in (@TOPIC_TYPE1, @TOPIC_TYPE2) and namespace_id >= @NAMESPACE_START and namespace_id <= @NAMESPACE_END and delete_date is null) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                   select top @TOP * from ( \
                      select top @INNERCOUNT topic_name, topic_id \
                      from jam_topic where virtual_wiki_id = @VWIKI_ID \
                       and topic_type in (@TOPIC_TYPE1, @TOPIC_TYPE2) \
                       and jam_topic.namespace_id >= @NAMESPACE_START \
                       and jam_topic.namespace_id <= @NAMESPACE_END \
                       and delete_date is null \
                      order by jam_topic.topic_name \
                   ) a \
                   order by topic_name desc \
                 ) b \
                  order by topic_name \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
# login is a reserved word, so surround with quotation marks
STATEMENT_SELECT_TOPIC_HISTORY = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @TOPIC_ID int \
        SET @TOPIC_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = ( \
            SELECT count(*) \
            FROM jam_topic, jam_virtual_wiki, jam_topic_version \
            LEFT OUTER JOIN jam_wiki_user ON ( \
              jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
            ) \
            WHERE jam_topic.topic_id = @TOPIC_ID \
            AND jam_topic.topic_id = jam_topic_version.topic_id \
            AND jam_topic.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id \
            AND jam_topic.delete_date is {0} null \
        ) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
          select top @TOP * from ( \
            select top @INNERCOUNT * from ( \
              SELECT \
                jam_topic_version.topic_version_id, jam_topic.topic_id, \
                jam_topic.topic_name, jam_topic_version.edit_date as change_date, \
                jam_topic_version.wiki_user_id, \
                coalesce(jam_wiki_user."login", jam_topic_version.wiki_user_display) as display_name, \
                jam_topic_version.edit_type, jam_virtual_wiki.virtual_wiki_id, \
                jam_virtual_wiki.virtual_wiki_name, jam_topic_version.edit_comment as change_comment, \
                jam_topic_version.previous_topic_version_id, \
                jam_topic_version.characters_changed, null as log_type, \
                null as log_sub_type, \
                jam_topic_version.version_params as log_params \
              FROM jam_topic, jam_virtual_wiki, jam_topic_version \
              LEFT OUTER JOIN jam_wiki_user ON ( \
                jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
              ) \
              WHERE jam_topic.topic_id = @TOPIC_ID \
              AND jam_topic.topic_id = jam_topic_version.topic_id \
              AND jam_topic.virtual_wiki_id = jam_virtual_wiki.virtual_wiki_id \
              AND jam_topic.delete_date is {0} null \
            ) as jam_recent_change \
            order by change_date desc \
          ) a \
          order by change_date \
        ) b \
        order by change_date desc \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
STATEMENT_SELECT_TOPICS_ADMIN = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @VWIKI_ID int \
        SET @VWIKI_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic where virtual_wiki_id = @VWIKI_ID and topic_admin_only = 1 and delete_date is null) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                   select top @TOP * from ( \
                      select top @INNERCOUNT  topic_name \
                      from jam_topic where virtual_wiki_id = @VWIKI_ID \
                       and topic_admin_only = 1 \
                       and delete_date is null \
                      order by topic_name \
                   ) a \
                   order by topic_name desc \
                 ) b \
                  order by topic_name \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
# login is a reserved word, so surround with quotation marks
STATEMENT_SELECT_WATCHLIST_CHANGES = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @VWIKI_ID int \
        DECLARE @USER_ID int \
        SET @VWIKI_ID = ? \
        SET @USER_ID = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic, jam_virtual_wiki, jam_topic_version, jam_wiki_user, jam_watchlist where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id and jam_topic.current_version_id = jam_topic_version.topic_version_id and jam_topic.topic_name = jam_watchlist.topic_name and jam_virtual_wiki.virtual_wiki_id = @VWIKI_ID and jam_watchlist.wiki_user_id = @USER_ID and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5)) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                      select top @TOP * from ( \
                        select top @INNERCOUNT \
                        jam_topic_version.topic_version_id, jam_topic_version.topic_id, \
                        jam_topic_version.previous_topic_version_id, jam_topic.topic_name, \
                        jam_topic_version.edit_date as change_date, jam_topic_version.edit_comment as change_comment, \
                        jam_topic_version.wiki_user_id, jam_topic_version.edit_type, \
                        jam_wiki_user."login" as display_name, jam_topic.virtual_wiki_id, \
                        jam_virtual_wiki.virtual_wiki_name, \
                        jam_topic_version.characters_changed, \
                        null as log_type, null as log_sub_type, \
                        jam_topic_version.version_params as log_params \
                        from jam_topic, jam_virtual_wiki, jam_topic_version, \
                        jam_wiki_user, jam_watchlist \
                        where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id \
                        and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
                        and jam_topic.current_version_id = jam_topic_version.topic_version_id \
                        and jam_topic.topic_name = jam_watchlist.topic_name \
                        and jam_virtual_wiki.virtual_wiki_id = @VWIKI_ID \
                        and jam_watchlist.wiki_user_id = @USER_ID \
                        and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5) \
                        order by change_date desc \
                      ) a \
                      order by change_date \
                    ) b \
                    order by change_date desc \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
STATEMENT_SELECT_WIKI_USER_CHANGES_ANONYMOUS = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @WIKI_NAME varchar(100) \
        DECLARE @WIKI_USER varchar(100) \
        SET @WIKI_NAME = ? \
        SET @WIKI_USER = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic, jam_virtual_wiki, jam_topic_version where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id and jam_topic.topic_id = jam_topic_version.topic_id and jam_virtual_wiki.virtual_wiki_name = @WIKI_NAME and jam_topic_version.wiki_user_display = @WIKI_USER and jam_topic_version.wiki_user_id is null and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5)) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                     select top @TOP * from ( \
                        select top @INNERCOUNT \
                        jam_topic_version.topic_version_id, jam_topic_version.topic_id, \
                        jam_topic_version.previous_topic_version_id, jam_topic.topic_name, \
                        jam_topic_version.edit_date as change_date, jam_topic_version.edit_comment as change_comment, \
                        jam_topic_version.wiki_user_id, jam_topic_version.edit_type, \
                        jam_topic_version.wiki_user_display as display_name, \
                        jam_topic.virtual_wiki_id, jam_virtual_wiki.virtual_wiki_name, \
                        jam_topic_version.characters_changed, \
                        null as log_type, null as log_sub_type, \
                        jam_topic_version.version_params as log_params \
                        from jam_topic, jam_virtual_wiki, jam_topic_version \
                        where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id \
                        and jam_topic.topic_id = jam_topic_version.topic_id \
                        and jam_virtual_wiki.virtual_wiki_name = @WIKI_NAME \
                        and jam_topic_version.wiki_user_display = @WIKI_USER \
                        and jam_topic_version.wiki_user_id is null \
                        and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5) \
                        order by change_date desc \
                      ) a \
                       order by change_date \
                    ) b \
                    order by change_date desc \
    END
# limit and offset aren't supported, so find another way to return only a portion of the result set
# login is a reserved word, so surround with quotation marks
STATEMENT_SELECT_WIKI_USER_CHANGES_LOGIN = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        DECLARE @WIKI_NAME varchar(100) \
        DECLARE @WIKI_USER varchar(100) \
        SET @WIKI_NAME = ? \
        SET @WIKI_USER = ? \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_topic, jam_virtual_wiki, jam_topic_version, jam_wiki_user where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id and jam_topic.topic_id = jam_topic_version.topic_id and jam_virtual_wiki.virtual_wiki_name = @WIKI_NAME and jam_wiki_user."login" = @WIKI_USER and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5)) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                      select top @TOP * from ( \
                        select top @INNERCOUNT \
                          jam_topic_version.topic_version_id, jam_topic_version.topic_id, \
                          jam_topic_version.previous_topic_version_id, jam_topic.topic_name, \
                          jam_topic_version.edit_date as change_date, jam_topic_version.edit_comment as change_comment, \
                          jam_topic_version.wiki_user_id, jam_topic_version.edit_type, \
                          jam_wiki_user."login" as display_name, jam_topic.virtual_wiki_id, \
                          jam_virtual_wiki.virtual_wiki_name, \
                          jam_topic_version.characters_changed, \
                          null as log_type, null as log_sub_type, \
                          jam_topic_version.version_params as log_params \
                        from jam_topic, jam_virtual_wiki, jam_topic_version, jam_wiki_user \
                        where jam_virtual_wiki.virtual_wiki_id = jam_topic.virtual_wiki_id \
                        and jam_wiki_user.wiki_user_id = jam_topic_version.wiki_user_id \
                        and jam_topic.topic_id = jam_topic_version.topic_id \
                        and jam_virtual_wiki.virtual_wiki_name = @WIKI_NAME \
                        and jam_wiki_user."login" = @WIKI_USER \
                        and (jam_topic.delete_date is null or jam_topic_version.edit_type = 5) \
                        order by change_date desc \
                      ) a \
                      order by change_date \
                    ) b \
                    order by change_date desc \
    END
# login is a reserved word, so surround with quotation marks
STATEMENT_SELECT_WIKI_USER_LOGIN = \
    select wiki_user_id from jam_wiki_user \
    where "login" = ?
# limit and offset aren't supported, so find another way to return only a portion of the result set
# login is a reserved word, so surround with quotation marks
STATEMENT_SELECT_WIKI_USERS = \
    BEGIN \
        DECLARE @COUNT int \
        DECLARE @TOP int \
        DECLARE @OFFSET int \
        DECLARE @LIMIT int \
        DECLARE @INNERCOUNT int \
        SET @LIMIT = ? \
        SET @OFFSET = ? \
        SET @TOP = @LIMIT \
        SET @COUNT = (select count(*) from jam_wiki_user) \
        IF (@OFFSET > @COUNT) SET @OFFSET = @COUNT \
        IF (@COUNT < @OFFSET + @LIMIT) SET @TOP = @COUNT - @OFFSET \
        SET @INNERCOUNT = @OFFSET + @LIMIT \
        select * from ( \
                   select top @TOP * from ( \
                      select top @INNERCOUNT "login" \
                      from jam_wiki_user \
                      order by "login" \
                   ) a \
                   order by "login" desc \
                 ) b \
                 order by "login" \
    END
